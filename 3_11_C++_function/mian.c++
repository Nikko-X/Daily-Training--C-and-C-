#include <iostream>

using namespace std;

/***************************************************************************************************************************************/
//函数的实现与c语言不同，c++可以带默认参数
//注意事项
//1、如果某个位置已经有了默认参数，那么从这个位置之后，从左往右都必须有默认参数
int func1(int a, int b = 10, int c, int d) //这里b有默认参数了，后面c,d也应该带默认参数(这里没报错,编译就会报错)
{
  return a + b + c + d;
}

//2、如果函数声明有默认参数，函数实现就不能有默认参数（或者说声明和实现只能一个有默认参数）
int func2(int a = 10, int b = 20);    //函数声明

int func2(int a = 20, int b = 20) //函数实现  此时编译就会出错
{
  return a + b;
}
/**************************************************************************************************************************************/

//函数占位参数
//语法： 返回类型值  函数名(数据类型){}
//占用参数也可以有默认值 如 void func(int a, int = 10)
void func(int a, int)    //第二个int就是占位参数，调用的时候必须补上这个值
{
  cout << "This is func" << endl;
}
/**************************************************************************************************************************************/

//函数重载
//作用：函数名可以相同，提高复用性

/*需满足条件
*1.一个作用域下
*2.函数名称相同
*3.函数的 参数类型不同 或者 个数不同 或者 顺序不同
*/
//函数的返回值不可以作为函数重载的条件

void func3(double a)
{
  cout << "func3的调用" << endl;
}

void func3(int a)
{
  cout << "func3的调用" << endl;
}

//函数重载注意事项

//1、引用作为重载条件
void func4(int &a)
{
  cout << "func(int &a)的调用" << endl;
}

void func4(const int &a)  //const 也是属于参数类型不同
{
  cout << "func(int cosnt &a)的调用" << endl;
}

//2、函数重载碰到函数默认参数
void func5(int a,int b =10)
{
  cout << "func5(int &a)的调用" << endl;
}

void func5(int a)  //是属于参数个数不同，但当传入一个参数时会出错，因为上下都可以调用，出现了二义性
{
  cout << "func5(int &a)的调用" << endl;
}

int main()
{
  //cout << func1(2,10,10);
  //func(10,10);  //函数占位 --> 这里必须传进来第二个值
  //func3(3.12);
  //int a = 10; //变量
  //func4(a);
  //func4(10);  //直接传入10 就会调用const版本 
  return 0;
}

